# This board is based on Wemos Lolin32 Oled display 128 x 64
substitutions:
  name: "esp32-o-masterbedroom"
packages:
  esphome.esp_web_tools_example: github://esphome/example-configs/esp-web-tools/esp32.yaml@v1
esphome:
  name: ${name}
  name_add_mac_suffix: false


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  

text_sensor:
  - platform: wifi_info
    ip_address:
      internal: true
      id: wifi_ip_addr
    ssid:
      internal: true
      id: wifi_ssid

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Asia/Calcutta
    
i2c:
  # Pin layout for Wemos Lolin32 Oled
  - id: bus_display
    sda: GPIO5
    scl: GPIO4
  

sensor:
  # AM2301 Sensor setup
  - platform: dht
    pin: GPIO16
    temperature:
      id: room_sensor_temperature
      name: "Master BedRoom Temperature"
    humidity:
      id: room_sensor_humidity
      name: "Master BedRoom Humidity"
    update_interval: 30s

  
# Display setup
font:
  # gfonts://family[@weight]
  - file: "gfonts://Roboto"
    id: roboto
    size: 14
   # gfonts://family[@weight]
  - file: "gfonts://Roboto@700"
    id: roboto_temp
    size: 20
  - file: "gfonts://Roboto@700"
    id: roboto_time
    size: 22
  - file: "gfonts://Roboto"
    id: roboto_ip
    size: 10
    
graph:
  # Show bare-minimum auto-ranged graph
  - id: room_temperature_graph
    sensor: room_sensor_temperature
    duration: 1h
    width: 128
    height: 44
    
  - id: room_humidity_graph
    sensor: room_sensor_humidity
    duration: 1h
    width: 128
    height: 44

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: my_display
    i2c_id: bus_display
    address: 0x3C
    pages:
      - id: page1
        lambda: |-
          // Print "Master Bedroom" in top center.
          it.print(64, 0, id(roboto), TextAlign::TOP_CENTER, "Master Bedroom");
    
          // Print inside temperature (from dht sensor)
          if (id(room_sensor_temperature).has_state()) {
            it.printf(0, 22, id(roboto_temp), TextAlign::TOP_LEFT , "%.1fÂ°", id(room_sensor_temperature).state);
          }
          
          if (id(room_sensor_humidity).has_state()) {
            it.printf(127, 22, id(roboto_temp), TextAlign::TOP_RIGHT , "%.1f%%", id(room_sensor_humidity).state);
          }
          
          // Print time in HH:MM format
          it.strftime(64, 64, id(roboto), TextAlign::BASELINE_CENTER, "%d %b %Y", id(homeassistant_time).now());
      - id: page2
        lambda: |-
          // Print "Temparature Trend" in top center.
          it.print(64, 0, id(roboto), TextAlign::TOP_CENTER, "Temperature Trend");
          
          // Display Temperature Graph
          it.graph(0, 20, id(room_temperature_graph));
      - id: page3
        lambda: |-
          // Print "Humidity Trend" in top center.
          it.print(64, 0, id(roboto), TextAlign::TOP_CENTER, "Humidity Trend");
          
          // Display Temperature Graph
          it.graph(0, 20, id(room_humidity_graph));
      - id: page4
        lambda: |-
          // Print "Temparature Trend" in top center.
          it.strftime(64, 20, id(roboto_time), TextAlign::TOP_CENTER, "%X", id(homeassistant_time).now());
          
          // Display IP
          it.print(64, 64, id(roboto_ip), TextAlign::BASELINE_CENTER, id(wifi_ip_addr).state.c_str());
          
interval:
  - interval: 10s
    then:
       - display.page.show: !lambda |-
              static int pagenum = 0;
              static display::DisplayPage* pages[] = {id(page1), id(page2), id(page3), id(page4)};
              auto page = pages[pagenum++];
              if (pagenum >= 4)
                pagenum = 0;
              return page;
       - component.update: my_display
